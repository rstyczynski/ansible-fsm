---
# Cleanup resources for app instance transition
# This task handles resource cleanup logic for application instances

- name: "Cleanup Resources - Check if resource cleanup is needed"
  set_fact:
    should_cleanup_resources: "{{ target_state in ['STOPPING', 'STOPPED', 'TERMINATING', 'TERMINATED'] }}"

- name: "Cleanup Resources - Display cleanup information"
  debug:
    msg:
      - "Target State: {{ target_state }}"
      - "Should Cleanup Resources: {{ should_cleanup_resources }}"
      - "Component: app_instance"
  when: should_cleanup_resources

- name: "Cleanup Resources - Stop and disable services"
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
  loop: "{{ component_services | default([]) }}"
  loop_control:
    loop_var: service_name
  when: should_cleanup_resources
  register: service_cleanup_result

- name: "Cleanup Resources - Kill any remaining processes"
  shell: "pkill -f '{{ item }}' || true"
  loop: "{{ component_processes | default([]) }}"
  loop_control:
    loop_var: process_name
  when: should_cleanup_resources
  register: process_cleanup_result
  failed_when: false

- name: "Cleanup Resources - Clean up temporary files"
  file:
    path: "{{ temp_file }}"
    state: absent
  loop:
    - "/tmp/app_instance_*"
    - "/var/tmp/app_instance_*"
  loop_control:
    loop_var: temp_file
  when: should_cleanup_resources
  register: temp_cleanup_result

- name: "Cleanup Resources - Clean up log files"
  file:
    path: "{{ log_file }}"
    state: absent
  loop:
    - "/var/log/app_instance_*"
    - "/var/log/ansible_app_instance_*"
  loop_control:
    loop_var: log_file
  when: should_cleanup_resources
  register: log_cleanup_result

- name: "Cleanup Resources - Clean up state files"
  file:
    path: "{{ state_file }}"
    state: absent
  loop:
    - "./state/state_app_instance_*.fact"
    - "./state/backups/state_app_instance_*.fact"
  loop_control:
    loop_var: state_file
  when: should_cleanup_resources
  register: state_cleanup_result

- name: "Cleanup Resources - Clean up network resources"
  shell: |
    # Remove any custom network configurations
    if command -v ip >/dev/null 2>&1; then
      ip addr show | grep app_instance || true
    fi
    
    # Clean up any custom firewall rules
    if command -v iptables >/dev/null 2>&1; then
      iptables -L | grep app_instance || true
    fi
  when: should_cleanup_resources
  register: network_cleanup_result
  failed_when: false

- name: "Cleanup Resources - Clean up storage resources"
  shell: |
    # Clean up any mounted filesystems
    mount | grep app_instance || true
    
    # Clean up any LVM volumes
    if command -v lvs >/dev/null 2>&1; then
      lvs | grep app_instance || true
    fi
  when: should_cleanup_resources
  register: storage_cleanup_result
  failed_when: false

- name: "Cleanup Resources - Wait for cleanup to complete"
  pause:
    seconds: 3
  when: should_cleanup_resources

- name: "Cleanup Resources - Verify cleanup completion"
  shell: |
    # Check if any processes are still running
    ps aux | grep -E "{{ component_processes | default([]) | join('|') }}" | grep -v grep || true
    
    # Check if any services are still active
    systemctl is-active {{ component_services | default([]) | join(' ') }} || true
  when: should_cleanup_resources
  register: cleanup_verification_result
  failed_when: false

- name: "Cleanup Resources - Display cleanup verification"
  debug:
    msg: "{{ cleanup_verification_result.stdout_lines }}"
  when: 
    - should_cleanup_resources
    - cleanup_verification_result is defined

- name: "Cleanup Resources - Record successful resource cleanup"
  set_fact:
    transition_actions_executed: "{{ transition_actions_executed | default([]) + ['resources_cleaned'] }}"
  when: should_cleanup_resources