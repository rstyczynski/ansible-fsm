---
# Namespaced state persistence to prevent variable contamination
# This version uses component-specific variable names to avoid conflicts

- name: "State Persist - Initialize namespaced state persistence for {{ component }}"
  set_fact:
    "{{ component }}_persistence_timestamp": "{{ ansible_date_time.iso8601 }}"
    "{{ component }}_persistence_success": false
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Validate required variables"
  assert:
    that:
      - component is defined and component != ""
      - new_state is defined and new_state != ""
    fail_msg: "Missing required variables: component='{{ component }}', new_state='{{ new_state }}'"
    success_msg: "All required variables are present"
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Validate new state is valid"
  assert:
    that:
      - new_state in component_state_machine.states
    fail_msg: "New state '{{ new_state }}' is not valid for component '{{ component }}'. Valid states: {{ component_state_machine.states | join(', ') }}"
    success_msg: "New state '{{ new_state }}' is valid for component '{{ component }}'"
  when: persistence_settings.validate_state
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Create backup directory"
  file:
    path: "{{ backup_directory }}"
    state: directory
    mode: '0755'
  when: backup_enabled and persistence_settings.create_backup
  tags:
    - state_persist
    - backup

- name: "State Persist - Check if current fact file exists"
  stat:
    path: "{{ state_fact_file }}"
  register: "{{ component }}_current_fact_file_stat"
  tags:
    - state_persist
    - backup

- name: "State Persist - Create backup of current fact file"
  copy:
    src: "{{ state_fact_file }}"
    dest: "{{ backup_directory }}/state_{{ component }}_{{ ansible_date_time.epoch }}.fact"
    remote_src: true
    mode: '0644'
  when: 
    - backup_enabled
    - persistence_settings.create_backup
    - lookup('vars', component + '_current_fact_file_stat').stat.exists
  tags:
    - state_persist
    - backup

- name: "State Persist - Clean up old backups"
  find:
    paths: "{{ backup_directory }}"
    patterns: "state_{{ component }}_*.fact"
    age: "{{ backup_retention_days }}d"
  register: "{{ component }}_old_backups"
  when: backup_enabled
  tags:
    - state_persist
    - backup

- name: "State Persist - Remove old backup files"
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ lookup('vars', component + '_old_backups').files }}"
  when: backup_enabled and lookup('vars', component + '_old_backups').files | length > 0
  tags:
    - state_persist
    - backup

- name: "State Persist - Prepare namespaced state fact content"
  set_fact:
    "{{ component }}_state_fact_content":
      component: "{{ component }}"
      component_state: "{{ new_state }}"
      component_state_timestamp: "{{ lookup('vars', component + '_persistence_timestamp') }}"
      component_state_method: "state_persist"
      component_state_valid: true
      component_state_previous: "{{ component_state | default('') }}"
      component_state_transition: "{{ component_state | default('initial') }} -> {{ new_state }}"
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Add metadata to namespaced fact content"
  set_fact:
    "{{ component }}_state_fact_content": "{{ lookup('vars', component + '_state_fact_content') | combine(component_metadata) }}"
  vars:
    component_metadata:
      hostname: "{{ ansible_hostname }}"
      playbook_name: "{{ ansible_play_name }}"
      user_id: "{{ ansible_user_id }}"
      ansible_version: "{{ ansible_version }}"
  when: persistence_settings.include_metadata
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Create state fact file"
  copy:
    content: "{{ lookup('vars', component + '_state_fact_content') | to_nice_yaml }}"
    dest: "{{ state_fact_file }}"
    mode: '0644'
    backup: false
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Verify fact file was created"
  stat:
    path: "{{ state_fact_file }}"
  register: "{{ component }}_fact_file_created"
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Validate fact file content"
  include_vars:
    file: "{{ state_fact_file }}"
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Verify persisted state"
  assert:
    that:
      - lookup('vars', component + '_state_fact_content').component_state == new_state
      - lookup('vars', component + '_state_fact_content').component_state_timestamp == lookup('vars', component + '_persistence_timestamp')
      - lookup('vars', component + '_state_fact_content').component_state_valid == true
    fail_msg: "State persistence verification failed. Expected: {{ new_state }}, Got: {{ lookup('vars', component + '_state_fact_content').component_state }}"
    success_msg: "State persistence verification successful"
  when: not ansible_check_mode
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Set namespaced persistence success"
  set_fact:
    "{{ component }}_persistence_success": true
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Update component state facts (namespaced)"
  set_fact:
    component_state: "{{ new_state }}"
    component_state_timestamp: "{{ lookup('vars', component + '_persistence_timestamp') }}"
    component_state_method: "state_persist"
    component_state_valid: true
    component_state_previous: "{{ component_state_previous | default('') }}"
    component_state_transition: "{{ component_state_transition | default('') }}"
  tags:
    - state_persist
    - state_facts

- name: "State Persist - Display namespaced persistence result"
  debug:
    msg:
      - "Component: {{ component }}"
      - "New State: {{ new_state }}"
      - "Previous State: {{ component_state_previous | default('none') }}"
      - "Persistence Timestamp: {{ lookup('vars', component + '_persistence_timestamp') }}"
      - "Fact File: {{ state_fact_file }}"
      - "Persistence Success: {{ lookup('vars', component + '_persistence_success') }}"
  tags:
    - state_persist
    - state_info

- name: "State Persist - Fail if namespaced persistence failed"
  fail:
    msg: "State persistence failed for component '{{ component }}'"
  when: not lookup('vars', component + '_persistence_success')
  tags:
    - state_persist
    - state_persistence
