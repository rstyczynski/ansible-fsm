---
# Main tasks for state_persist role
# This role persists component state to fact files for auditability and state tracking

- name: "State Persist - Get current timestamp"
  ansible.builtin.command: date -u +"%Y-%m-%dT%H:%M:%SZ"
  register: current_timestamp
  changed_when: false

- name: "State Persist - Initialize state persistence for {{ component }}"
  set_fact:
    persistence_timestamp: '{{ current_timestamp.stdout }}'
    persistence_success: false
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Validate required variables"
  assert:
    that:
      - component is defined and component != ""
      - new_state is defined and new_state != ""
    fail_msg: "Missing required variables: component='{{ component }}', new_state='{{ new_state }}'"
    success_msg: "All required variables are present"
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Validate new state is valid"
  assert:
    that:
      - new_state in component_state_machine.states
    fail_msg: "New state '{{ new_state }}' is not valid for component '{{ component }}'. Valid states: {{ component_state_machine.states | join(', ') }}"
    success_msg: "New state '{{ new_state }}' is valid for component '{{ component }}'"
  when: persistence_settings.validate_state
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Create backup directory"
  file:
    path: "{{ backup_directory }}"
    state: directory
    mode: '0755'
  when: backup_enabled and persistence_settings.create_backup
  tags:
    - state_persist
    - backup

- name: "State Persist - Check if current fact file exists"
  stat:
    path: "{{ state_fact_file }}"
  register: current_fact_file_stat
  tags:
    - state_persist
    - backup

- name: "State Persist - Create backup of current fact file"
  copy:
    src: "{{ state_fact_file }}"
    dest: "{{ backup_directory }}/state_{{ component }}_{{ ansible_date_time.epoch }}.fact"
    remote_src: true
    mode: '0644'
  when: 
    - backup_enabled
    - persistence_settings.create_backup
    - current_fact_file_stat.stat.exists
  tags:
    - state_persist
    - backup

- name: "State Persist - Clean up old backups"
  find:
    paths: "{{ backup_directory }}"
    patterns: "state_{{ component }}_*.fact"
    age: "{{ backup_retention_days }}d"
  register: old_backups
  when: backup_enabled
  tags:
    - state_persist
    - backup

- name: "State Persist - Remove old backup files"
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ old_backups.files }}"
  when: backup_enabled and old_backups.files | length > 0
  tags:
    - state_persist
    - backup

- name: "State Persist - Prepare state fact content"
  set_fact:
    state_fact_content:
      component: "{{ component }}"
      component_state: "{{ new_state }}"
      component_state_timestamp: "{{ current_timestamp.stdout }}"
      component_state_method: "state_persist"
      component_state_valid: true
      component_state_previous: "{{ current_state | default('') }}"
      component_state_transition: "{{ current_state | default('initial') }} -> {{ new_state }}"
  tags:
    - state_persist
    - state_persistence



- name: "State Persist - Add metadata to fact content"
  set_fact:
    state_fact_content: "{{ state_fact_content | combine(component_metadata) }}"
  vars:
    component_metadata:
      hostname: "{{ ansible_hostname }}"
      playbook_name: "{{ ansible_play_name }}"
      user_id: "{{ ansible_user_id }}"
      ansible_version: "{{ ansible_version }}"
  when: persistence_settings.include_metadata
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Create state fact file"
  copy:
    content: "{{ state_fact_content | to_nice_yaml }}"
    dest: "{{ state_fact_file }}"
    mode: '0644'
    backup: false
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Verify fact file was created"
  stat:
    path: "{{ state_fact_file }}"
  register: fact_file_created
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Validate fact file content"
  include_vars:
    file: "{{ state_fact_file }}"
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Verify persisted state"
  assert:
    that:
      - state_fact_content.component_state == new_state
      - state_fact_content.component_state_timestamp == persistence_timestamp
      - state_fact_content.component_state_valid == true
    fail_msg: "State persistence verification failed. Expected: {{ new_state }}, Got: {{ state_fact_content.component_state }}"
    success_msg: "State persistence verification successful"
  when: not ansible_check_mode
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Set persistence success"
  set_fact:
    persistence_success: true
  tags:
    - state_persist
    - state_persistence

- name: "State Persist - Update component state facts"
  set_fact:
    component_state: "{{ new_state }}"
    component_state_timestamp: "{{ persistence_timestamp }}"
    component_state_method: "state_persist"
    component_state_valid: true
    component_state_previous: "{{ component_state_previous | default('') }}"
    component_state_transition: "{{ component_state_transition | default('') }}"
  tags:
    - state_persist
    - state_facts

- name: "State Persist - Display persistence result"
  debug:
    msg:
      - "Component: {{ component }}"
      - "New State: {{ new_state }}"
      - "Previous State: {{ component_state_previous | default('none') }}"
      - "Persistence Timestamp: {{ persistence_timestamp }}"
      - "Fact File: {{ state_fact_file }}"
      - "Persistence Success: {{ persistence_success }}"
  tags:
    - state_persist
    - state_info

# - name: "State Context - Set final state facts"
#   set_fact:
#     # component_state: "{{ current_state }}"
#     # component_state_timestamp: "{{ state_reading_timestamp }}"
#     # component_state_method: "{{ state_reading_method }}"
#     # component_state_valid: true
#     # Note: component_states map is now handled by state_change role
    
- name: "State Persist - Fail if persistence failed"
  fail:
    msg: "State persistence failed for component '{{ component }}'"
  when: not persistence_success
  tags:
    - state_persist
    - state_persistence
