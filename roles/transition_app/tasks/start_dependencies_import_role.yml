---
# Start dependencies using import_role for variable isolation
# This version uses import_role instead of include_role to prevent variable contamination

- name: "Start Dependencies - Check if dependencies need to be started"
  set_fact:
    should_start_dependencies: "{{ target_state in ['STARTING', 'RUNNING'] and component_dependencies | default([]) | length > 0 }}"

- name: "Start Dependencies - Display dependency startup information"
  debug:
    msg:
      - "Target State: {{ target_state }}"
      - "Should Start Dependencies: {{ should_start_dependencies }}"
      - "Dependencies to Start: {{ component_dependencies | default([]) | join(', ') }}"
  when: should_start_dependencies

- name: "Start Dependencies - Extract dependency states from global state map"
  set_fact:
    dependency_states: "{{ component_dependencies | map('extract', global_component_states) | map(attribute='state') | list }}"
  when:
    - should_start_dependencies
    - component_dependencies | default([]) | length > 0

- name: "Start Dependencies - Create dependency state mapping"
  set_fact:
    dependency_state_map: "{{ dict(component_dependencies | zip(dependency_states)) }}"
  when:
    - should_start_dependencies
    - component_dependencies | default([]) | length > 0

- name: "Start Dependencies - Start dependencies that are not RUNNING (using import_role)"
  import_role:
    name: state_change
  vars:
    override_component_name: "{{ dep_item.key }}"
    target_state: RUNNING
    component_dependencies: "{{ asset_definitions[dep_item.key].dependencies | default([]) }}"
  loop: "{{ dependency_state_map | dict2items }}"
  loop_control:
    loop_var: dep_item
  when:
    - should_start_dependencies
    - dep_item.value not in ['RUNNING']
  tags:
    - state_change
    - start_dependencies

- name: "Start Dependencies - Validate all dependencies are RUNNING"
  ansible.builtin.assert:
    that:
      - dep_item.value == 'RUNNING'
    fail_msg: "Dependency {{ dep_item.key }} is not RUNNING (current: {{ dep_item.value }})"
    success_msg: "All dependencies are RUNNING"
  loop: "{{ dependency_state_map | dict2items }}"
  loop_control:
    loop_var: dep_item
  when:
    - should_start_dependencies
    - component_dependencies | default([]) | length > 0
  tags:
    - state_change
    - start_dependencies
